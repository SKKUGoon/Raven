# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import market_data_pb2 as market__data__pb2
import subscription_pb2 as subscription__pb2


class MarketDataServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamMarketData = channel.stream_stream(
                '/raven.MarketDataService/StreamMarketData',
                request_serializer=subscription__pb2.SubscriptionRequest.SerializeToString,
                response_deserializer=market__data__pb2.MarketDataMessage.FromString,
                )
        self.Subscribe = channel.unary_unary(
                '/raven.MarketDataService/Subscribe',
                request_serializer=subscription__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=subscription__pb2.SubscribeResponse.FromString,
                )
        self.Unsubscribe = channel.unary_unary(
                '/raven.MarketDataService/Unsubscribe',
                request_serializer=subscription__pb2.UnsubscribeRequest.SerializeToString,
                response_deserializer=subscription__pb2.UnsubscribeResponse.FromString,
                )
        self.GetHistoricalData = channel.unary_stream(
                '/raven.MarketDataService/GetHistoricalData',
                request_serializer=subscription__pb2.HistoricalDataRequest.SerializeToString,
                response_deserializer=market__data__pb2.MarketDataMessage.FromString,
                )


class MarketDataServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamMarketData(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unsubscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHistoricalData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MarketDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamMarketData': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamMarketData,
                    request_deserializer=subscription__pb2.SubscriptionRequest.FromString,
                    response_serializer=market__data__pb2.MarketDataMessage.SerializeToString,
            ),
            'Subscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=subscription__pb2.SubscribeRequest.FromString,
                    response_serializer=subscription__pb2.SubscribeResponse.SerializeToString,
            ),
            'Unsubscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Unsubscribe,
                    request_deserializer=subscription__pb2.UnsubscribeRequest.FromString,
                    response_serializer=subscription__pb2.UnsubscribeResponse.SerializeToString,
            ),
            'GetHistoricalData': grpc.unary_stream_rpc_method_handler(
                    servicer.GetHistoricalData,
                    request_deserializer=subscription__pb2.HistoricalDataRequest.FromString,
                    response_serializer=market__data__pb2.MarketDataMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raven.MarketDataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MarketDataService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamMarketData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/raven.MarketDataService/StreamMarketData',
            subscription__pb2.SubscriptionRequest.SerializeToString,
            market__data__pb2.MarketDataMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/raven.MarketDataService/Subscribe',
            subscription__pb2.SubscribeRequest.SerializeToString,
            subscription__pb2.SubscribeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unsubscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/raven.MarketDataService/Unsubscribe',
            subscription__pb2.UnsubscribeRequest.SerializeToString,
            subscription__pb2.UnsubscribeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHistoricalData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/raven.MarketDataService/GetHistoricalData',
            subscription__pb2.HistoricalDataRequest.SerializeToString,
            market__data__pb2.MarketDataMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
